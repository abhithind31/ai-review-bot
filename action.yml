# action.yml
name: 'AI Code Review Bot Action'
description: 'Runs AI-based code reviews on PR hunks triggered by a comment, using AWS Bedrock.'
author: 'Your Name or Organization'

inputs:
  github-token:
    description: 'GitHub token for API calls. Defaults to the token provided by the workflow.'
    required: false
    default: ${{ github.token }}

  # AWS OIDC and Role Chaining Configuration (from secrets)
  oidc-role-arn:
    description: 'ARN of the IAM role that trusts GitHub OIDC for the initial AWS connection.'
    required: true
  oidc-role-aws-region:
    description: 'AWS region where the OIDC IAM role is located.'
    required: true
  bedrock-role-arn:
    description: 'ARN of the IAM role that will be assumed for Bedrock access (can be in the same or different account as OIDC role).'
    required: true
  bedrock-aws-region:
    description: 'AWS Region where Bedrock model is hosted (e.g., us-east-1). This is for the Bedrock service itself.'
    required: true

  # Bedrock Model Configuration
  bedrock-model-id:
    description: 'AWS Bedrock model ID to use.'
    required: false
    default: 'anthropic.claude-3-sonnet-20240229-v1:0'
  config-path:
    description: 'Path to the reviewer config file in the consuming repo.'
    required: false
    default: '.github/clara-reviewer.yml'

  # Jira Configuration (from secrets)
  jira-url:
    description: 'JIRA URL for integration.'
    required: false # Make optional if Jira is not always used
  jira-user-email:
    description: 'JIRA user email for integration.'
    required: false # Make optional
  jira-api-token:
    description: 'JIRA API token for integration.'
    required: false # Make optional

  # aws-access-key-id, aws-secret-access-key, aws-session-token are effectively unused when OIDC is handled internally.
  aws-access-key-id:
    description: 'AWS Access Key ID. (Typically not needed if using internal OIDC)'
    required: false
  aws-secret-access-key:
    description: 'AWS Secret Access Key. (Typically not needed if using internal OIDC)'
    required: false
  aws-session-token:
    description: 'AWS Session Token. (Typically not needed if using internal OIDC)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.oidc-role-arn }}
        role-chaining: true
        aws-region: ${{ inputs.oidc-role-aws-region }} # Region for the initial OIDC role assumption
      env:
        AWS_ROLE_ARN: ${{ inputs.bedrock-role-arn }} # Role to chain to for Bedrock access
        AWS_ROLE_SESSION_NAME: GitHubActionAICodeReview

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        echo "Installing dependencies from ${{ github.action_path }}/requirements.txt"
        python -m pip install --upgrade pip
        pip install -r ${{ github.action_path }}/requirements.txt

    - name: Run AI Review Script
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        # AWS credentials are set by the 'Configure AWS Credentials' step above.
        AWS_REGION: ${{ inputs.bedrock-aws-region }} # This is the region for Bedrock service calls
        BEDROCK_MODEL_ID: ${{ inputs.bedrock-model-id }}
        CONFIG_PATH: ${{ inputs.config-path }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_API_URL: ${{ github.api_url }}
        PR_NUMBER: ${{ github.event.issue.number }}
        JIRA_URL: ${{ inputs.jira-url }}
        JIRA_USER_EMAIL: ${{ inputs.jira-user-email }}
        JIRA_API_TOKEN: ${{ inputs.jira-api-token }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      run: python ${{ github.action_path }}/src/main.py 